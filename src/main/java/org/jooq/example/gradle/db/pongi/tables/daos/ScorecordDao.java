/**
 * This class is generated by jOOQ
 */
package org.jooq.example.gradle.db.pongi.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.example.gradle.db.pongi.tables.Scorecord;
import org.jooq.example.gradle.db.pongi.tables.records.ScorecordRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScorecordDao extends DAOImpl<ScorecordRecord, org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord, Record2<String, String>> {

	/**
	 * Create a new ScorecordDao without any configuration
	 */
	public ScorecordDao() {
		super(Scorecord.SCORECORD, org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord.class);
	}

	/**
	 * Create a new ScorecordDao with an attached configuration
	 */
	public ScorecordDao(Configuration configuration) {
		super(Scorecord.SCORECORD, org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Record2<String, String> getId(org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord object) {
		return compositeKeyRecord(object.getUser(), object.getGameid());
	}

	/**
	 * Fetch records that have <code>user IN (values)</code>
	 */
	public List<org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord> fetchByUser(String... values) {
		return fetch(Scorecord.SCORECORD.USER, values);
	}

	/**
	 * Fetch records that have <code>won IN (values)</code>
	 */
	public List<org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord> fetchByWon(Byte... values) {
		return fetch(Scorecord.SCORECORD.WON, values);
	}

	/**
	 * Fetch records that have <code>scoredPoint IN (values)</code>
	 */
	public List<org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord> fetchByScoredpoint(Integer... values) {
		return fetch(Scorecord.SCORECORD.SCOREDPOINT, values);
	}

	/**
	 * Fetch records that have <code>lostPoint IN (values)</code>
	 */
	public List<org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord> fetchByLostpoint(Integer... values) {
		return fetch(Scorecord.SCORECORD.LOSTPOINT, values);
	}

	/**
	 * Fetch records that have <code>gameID IN (values)</code>
	 */
	public List<org.jooq.example.gradle.db.pongi.tables.pojos.Scorecord> fetchByGameid(String... values) {
		return fetch(Scorecord.SCORECORD.GAMEID, values);
	}
}
