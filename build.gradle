group 'pl.setblack'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
    }
}

apply plugin: 'java'

apply plugin: 'org.junit.platform.gradle.plugin'

apply plugin: 'application'


sourceCompatibility = 1.8
ext.junitJupiterVersion  = '5.0.0-M3'

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated-sources/java/"
        }
    }
}

compileJava {
    options.compilerArgs << '-parameters'

}

repositories {
    mavenCentral()
}

mainClassName = "pl.setblack.pongi.Main"

dependencies {
    compile group: 'io.ratpack', name: 'ratpack-core', version: '1.4.4'
    compile group: 'pl.setblack', name: 'badass', version: '1.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'pl.setblack:airomem-core:1.1.0'
    compile 'io.javaslang:javaslang:2.1.0-alpha'
    compile 'io.javaslang:javaslang-jackson:2.1.0-alpha'
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.0.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.6'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.8.6'

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'io.ratpack', name: 'ratpack-test', version: '1.4.4'

    //JOOQ
    compile 'org.jooq:jooq:3.7.4'

    runtime 'com.h2database:h2:1.4.177'
}


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.7.4'
        classpath 'com.h2database:h2:1.4.177'
    }
}


// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
    jdbc() {
        driver('org.h2.Driver')
        url('jdbc:h2:~/test-gradle')
        user('sa')
        password('')
    }
    generator() {
        database() {
        }

        // Watch out for this caveat when using MarkupBuilder with "reserved names"
        // - https://github.com/jOOQ/jOOQ/issues/4797
        // - http://stackoverflow.com/a/11389034/521799
        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
        generate([:]) {
            pojos true
            daos false
        }
        target() {
            packageName('pl.setblack.pong.jooq')
            directory('build/generated-sources/java')
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
        javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)


